'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';

// Type definitions
interface GrammarIssue {
  type: string;
  severity: string;
  description: string;
  original_text?: string;
  suggested_fix?: string;
  line_number?: number;
}

interface FormatIssue {
  section: string;
  issue_type: string;
  description: string;
  severity: string;
}

interface ContentIssue {
  section: string;
  issue_type: string;
  description: string;
  suggestion: string;
  severity: string;
}

interface Recommendation {
  category: string;
  priority: string;
  title: string;
  description: string;
  action_items: string[];
  expected_impact: string;
}

interface RejectionReason {
  category: string;
  reason: string;
  confidence: number;
  evidence: string[];
  suggestions: string[];
}

interface AnalysisResults {
  project_id: string;
  analysis_status: string;
  message?: string;
  overall_score?: number;
  rejection_probability?: number;
  grammar_issues?: GrammarIssue[];
  format_issues?: FormatIssue[];
  content_issues?: ContentIssue[];
  recommendations?: Recommendation[];
  rejection_reasons?: RejectionReason[];
}

// Helper function to get severity color
const getSeverityColor = (severity: string): string => {
  const severityLower = severity?.toLowerCase() || 'medium';
  switch (severityLower) {
    case 'high':
      return 'bg-red-100 border-red-400 text-red-800';
    case 'medium':
      return 'bg-yellow-100 border-yellow-400 text-yellow-800';
    case 'low':
      return 'bg-blue-100 border-blue-400 text-blue-800';
    default:
      return 'bg-gray-100 border-gray-400 text-gray-800';
  }
};\n
export default function ResultsPage() {
  const router = useRouter();
  const params = useParams();
  const projectId = Array.isArray(params.projectId) ? params.projectId[0] : params.projectId;
  const [results, setResults] = useState<AnalysisResults | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchResults = async () => {
      if (!projectId) {
        setError('No project ID provided');
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(`/api/analyze/result/${projectId}`);
        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }
        const data = await response.json();
        setResults(data);
      } catch (err) {
        console.error('Failed to fetch results:', err);
        setError(err instanceof Error ? err.message : 'Failed to load analysis results');
      } finally {
        setLoading(false);
      }
    };

    fetchResults();
  }, [projectId]);

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Analyzing your manuscript...</p>
          <p className="text-sm text-gray-500 mt-2">This may take a moment</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error || !results) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center">
          <div className="text-red-500 text-5xl mb-4">⚠️</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Analysis Failed</h2>
          <p className="text-gray-600 mb-6">
            {error || 'No analysis results found for this project.'}
          </p>
          <button
            onClick={() => router.push('/submit')}
            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Start New Analysis
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Analysis Results</h1>
              <p className="text-gray-600 mt-1">Project ID: {results.project_id}</p>
              {results.overall_score !== undefined && (
                <div className="mt-2">
                  <span className="text-sm font-medium text-gray-700">Overall Score: </span>
                  <span className="text-lg font-bold text-blue-600">
                    {results.overall_score.toFixed(1)}/10
                  </span>
                </div>
              )}
            </div>
            <Link
              href="/submit"
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm"
            >
              New Analysis
            </Link>
          </div>
        </div>

        {/* Summary Section */}
        {results.message && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Summary</h2>
            <p className="text-gray-700 whitespace-pre-line">{results.message}</p>
          </div>
        )}

        {/* Grammar Issues */}
        {results.grammar_issues && results.grammar_issues.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Grammar & Language Issues</h2>
            <div className="space-y-4">
              {results.grammar_issues.slice(0, 5).map((issue, index) => (
                <div 
                  key={index} 
                  className={`border-l-4 pl-4 py-2 ${getSeverityColor(issue.severity)}`}
                >
                  <p className="font-medium">{issue.type} ({issue.severity})</p>
                  <p className="text-sm">{issue.description}</p>
                  {issue.original_text && (
                    <p className="text-sm mt-1">
                      <span className="font-medium">Original:</span> {issue.original_text}
                    </p>
                  )}
                  {issue.suggested_fix && (
                    <p className="text-sm mt-1">
                      <span className="font-medium">Suggestion:</span> {issue.suggested_fix}
                    </p>
                  )}
                </div>
              ))}
              {results.grammar_issues.length > 5 && (
                <p className="text-sm text-gray-500 text-right">
                  +{results.grammar_issues.length - 5} more issues not shown
                </p>
              )}
            </div>
          </div>
        )}

        {/* Content Issues */}
        {results.content_issues && results.content_issues.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Content Issues</h2>
            <div className="space-y-4">
              {results.content_issues.map((issue, index) => (
                <div 
                  key={index} 
                  className={`border-l-4 pl-4 py-2 ${getSeverityColor(issue.severity)}`}
                >
                  <p className="font-medium">{issue.section} - {issue.issue_type} ({issue.severity})</p>
                  <p className="text-sm">{issue.description}</p>
                  <p className="text-sm mt-1">
                    <span className="font-medium">Suggestion:</span> {issue.suggestion}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Format Issues */}
        {results.format_issues && results.format_issues.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Formatting Issues</h2>
            <div className="space-y-4">
              {results.format_issues.map((issue, index) => (
                <div 
                  key={index} 
                  className={`border-l-4 pl-4 py-2 ${getSeverityColor(issue.severity)}`}
                >
                  <p className="font-medium">{issue.section} - {issue.issue_type} ({issue.severity})</p>
                  <p className="text-sm">{issue.description}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Rejection Reasons */}
        {results.rejection_reasons && results.rejection_reasons.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Potential Rejection Reasons</h2>
            <div className="space-y-6">
              {results.rejection_reasons.map((reason, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <h3 className="text-lg font-medium text-gray-900">{reason.category}</h3>
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {Math.round(reason.confidence * 100)}% Confidence
                    </span>
                  </div>
                  <p className="mt-1 text-gray-700">{reason.reason}</p>
                  
                  {reason.evidence && reason.evidence.length > 0 && (
                    <div className="mt-3">
                      <h4 className="text-sm font-medium text-gray-900">Evidence:</h4>
                      <ul className="mt-1 list-disc list-inside text-sm text-gray-700 space-y-1">
                        {reason.evidence.map((evidence, idx) => (
                          <li key={idx} className="ml-4">{evidence}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {reason.suggestions && reason.suggestions.length > 0 && (
                    <div className="mt-3">
                      <h4 className="text-sm font-medium text-gray-900">Suggestions:</h4>
                      <ul className="mt-1 list-disc list-inside text-sm text-gray-700 space-y-1">
                        {reason.suggestions.map((suggestion, idx) => (
                          <li key={idx} className="ml-4">{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Recommendations */}
        {results.recommendations && results.recommendations.length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Recommendations</h2>
            <div className="grid gap-6 md:grid-cols-2">
              {results.recommendations.map((rec, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-start">
                    <h3 className="text-lg font-medium text-gray-900">{rec.title}</h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      rec.priority.toLowerCase() === 'high' ? 'bg-red-100 text-red-800' :
                      rec.priority.toLowerCase() === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-blue-100 text-blue-800'
                    }`}>
                      {rec.priority} Priority
                    </span>
                  </div>
                  <p className="mt-1 text-gray-700">{rec.description}</p>
                  
                  {rec.action_items && rec.action_items.length > 0 && (
                    <div className="mt-3">
                      <h4 className="text-sm font-medium text-gray-900">Action Items:</h4>
                      <ul className="mt-1 list-disc list-inside text-sm text-gray-700 space-y-1">
                        {rec.action_items.map((item, idx) => (
                          <li key={idx} className="ml-4">{item}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {rec.expected_impact && (
                    <div className="mt-3 pt-3 border-t border-gray-100">
                      <p className="text-sm">
                        <span className="font-medium">Expected Impact:</span> {rec.expected_impact}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Raw Data (for debugging) */}
        <details className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <summary className="text-sm font-medium text-gray-700 cursor-pointer">
            View Raw Analysis Data
          </summary>
          <div className="mt-4 bg-gray-50 p-4 rounded-md overflow-auto max-h-96">
            <pre className="text-xs">
              <code>{JSON.stringify(results, null, 2)}</code>
            </pre>
          </div>
        </details>
      </div>
    </div>
  );
}
